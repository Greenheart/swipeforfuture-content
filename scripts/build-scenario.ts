import { resolve, join } from "path"
import { promises, readdirSync, statSync } from "fs"
const { writeFile, mkdir } = promises

import { GameWorld, ScenarioBuilder, Scenario } from "./content-utils"
const MANIFEST_FILENAME = "scenarios.json"

async function buildScenario(id: string) {
    try {
        const builder: ScenarioBuilder = (
            await import(`./scenarios/${id}/index.ts`)
        ).builder

        const scenario = builder.run()
        console.log(`✅ Successfully built scenario "${id}"`)

        return scenario
    } catch (e) {
        throw new Error(`Error: Failed to build scenario "${id}" - ${e}`)
    }
}

async function exportScenario(outputDir: string, scenario: Scenario) {
    type Parts = {
        [K in keyof GameWorld]: string
    }

    const scenarioParts: Parts = {
        cards: "cards",
        eventCards: "event-cards",
        events: "events",
        defaultState: "default-state",
        stats: "stats",
        worldStateModifiers: "modifiers",
    }

    await mkdir(outputDir, { recursive: true })

    await Promise.all(
        Object.entries(scenarioParts).map(([part, fileName]) =>
            writeFile(
                resolve(join(outputDir, `${fileName}.json`)),
                JSON.stringify(scenario[part as keyof GameWorld], null, 4),
            ),
        ),
    )

    console.log(
        `✅ Successfully exported scenario "${scenario.id}" to ${outputDir}`,
    )
}

// TODO: Move this somewhere to allow simple use when loading manifest files in the game
interface ScenarioManifest {
    /**
     * ISO formatted date, generated by the build script.
     */
    buildDate: string
    /**
     * Details about each scenario.
     * IDEA: Scenario name, description, cover image, estimated playtime, number of cards, credits to creators
     */
    scenarios: {
        [id: string]: {}
    }
}

function getScenarioIds(path: string): string[] {
    return readdirSync(path).filter((entry) =>
        statSync(join(path, entry)).isDirectory(),
    )
}

async function buildScenarioManifest(ids: string[], outputDir: string) {
    const manifest: ScenarioManifest = {
        buildDate: new Date().toISOString(),
        scenarios: {},
    }

    ids.forEach((id) => {
        manifest.scenarios[id] = {}
    })

    await mkdir(outputDir, { recursive: true })

    return writeFile(
        join(outputDir, MANIFEST_FILENAME),
        JSON.stringify(manifest, null, 4),
    )
}

async function buildScenarios(ids: string[], outputDir: string) {
    return Promise.all(
        ids.map((id) => {
            return buildScenario(id).then((scenario: Scenario) => {
                const path = resolve(join(outputDir, id))
                exportScenario(path, scenario)
            })
        }),
    )
}

if (require.main === module) {
    const id = process.argv.length >= 3 ? process.argv[2] : "*"
    const outputDir = process.argv.length >= 4 ? process.argv[3] : "dist"
    const allScenarioIds = getScenarioIds(join(__dirname, "scenarios"))
    const ids = id === "*" ? allScenarioIds : [id]

    buildScenarios(ids, outputDir)
    buildScenarioManifest(allScenarioIds, outputDir)
}
